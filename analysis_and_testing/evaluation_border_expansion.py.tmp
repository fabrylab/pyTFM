import sys
import numpy as np
import os
import re
import matplotlib.pyplot as plt
sys.path.append("/home/user/Software/pyTFM/analysis_and_testing")
from general_evaluation import *
from plotting_evaluation import *

stress_tensor_f, u_b, v_b = None, None, None








out_folder =  "/home/user/Desktop/backup_from_harddrive/data_traction_force_microscopy/ev_paper_expansion"

display_bd = None
#end_shape = (390,400) # shape of real data/ and that looks nice in artfiical system, need to adjust for every experiment
end_shape = (260,260)
young = 1
h = 100
pixelsize = 1
border_ex_test = np.loadtxt(os.path.join(out_folder,"avg_norm_stress.txt"), delimiter=",")[:,1].astype(int)
# read factor for filename conversion:
with open(os.path.join(out_folder,"avg_norm_stress.txt")) as f:
    l = f.readline()
    if "conversion_to_filenames=" in l:
        filename_factor = int(re.search("#conversion_to_filenames=(\d{1,4}).*", l).group(1))
    else:
        filename_factor = 1


filter = "gaussian"
exp_method = "manual"
f_type = "circular"  # display_option


stress_tensors, mean_normal_list, mask_exp_list = load_exp_border(out_folder=out_folder, exp_range=border_ex_test,filename_factor=filename_factor)
try:
    mask = np.load(os.path.join(out_folder, "mask.npy"))
except FileNotFoundError:
    mask = mask_exp_list[0]

stress_tensor_b = setup_stress_field(mask, distribution="uniform", sigma_n=1, sigma_shear=0,
                                      sigma_gf=6)
fx_b, fy_b = traction_from_stress(stress_tensor_b, pixelsize, plot=False, grad_type="diff1")
try:
    u_b, v_b = np.load(os.path.join(out_folder, "u_b.npy")), np.load(os.path.join(out_folder, "v_b.npy"))
except FileNotFoundError:
    try:
        u_b, v_b = np.load(os.path.join(out_folder, "u.npy")), np.load(os.path.join(out_folder, "v.npy"))
    except FileNotFoundError:
        pass

try:
    fx_f, fy_f = traction_wrapper(u_b, v_b, pixelsize, h, young, mask=mask,
                                  filter=filter)  # assuming pixelsize == 1
except:
    fx_f, fy_f =  np.load(os.path.join(out_folder, "fx_f.npy")), np.load(os.path.join(out_folder, "fy_f.npy"))

try:
    stress_tensor_f = np.load(os.path.join(out_folder, "stress_tensor_f.npy"))
except FileNotFoundError:
    pass

#


# picking mask of fem grid to be displayed
if not isinstance(display_bd, int):
    display_id = np.argmax([np.nanmean(ms[mask.astype(bool)]) for ms in mean_normal_list])
else:
    display_id = np.argmin(np.abs(np.array(border_ex_test) - display_bd))
stress_tensor_f = stress_tensors[display_id]
mask_fem = mask_exp_list[display_id]

mask_fm = binary_dilation(mask, iterations=25)  #
fields = {"u_b":u_b, "v_b":v_b, "fx_b":fx_b, "fy_b":fy_b,"fx_f":fx_f, "fy_f":fy_f, "stress_tensor_b":stress_tensor_b, "stress_tensor_f":stress_tensor_f,
        "mask":mask, "mask_fem":mask_fem, "mask_fm": mask_fm}#

measures = standard_measures(mask=mask, mean_normal_list=mean_normal_list, fields=fields)

scalar_comaprisons = full_field_comparision(fields)
avg_normal_stress_be = [np.nanmean(ms[mask.astype(bool)]) for ms in mean_normal_list]
border_ex_test = border_ex_test-np.min(border_ex_test) # setting to zero (only usefull for these sepecific cases)

# getting comparison scalar fields

# cutting to ignore effects close to image edge #### mention this when talking to benn

# used to be [20, -20, 20, -20] with mode="edge
fields = cut_arrays(end_shape, fields, mode="match")
mask_exp_list = cut_arrays(end_shape, mask_exp_list, mode="match")

#max_force = np.max(np.sqrt(fx_f**2 + fy_f**2)) #0.06
max_force = 1
max_stress = np.max(avg_normal_stress_be)
max_dict = {"stress": max_stress, "force": max_force*1.1}




import pylustrator

pylustrator.start()
fig, axs = plt.subplots(1,3)

key_values = measures
values1 = [key_values["contractile_force_b"], key_values["contractile_force_f"]]
labels1 = ["contractility", "contractility"]
values2 = [key_values['mean_normal_stress_b'], key_values['mean_normal_stress_f'], key_values["mean_shear_b"],
           key_values["mean_shear_f"]]
labels2 = ["mean normal stress", "mean normal stress", "meanshear stress", "mean shear stress"]
values3 = [key_values["cv_b"], key_values["cv_f"]]
lables3 = ["cv", "cv"]

bar_plot_ax(axs[0], values1, labels1, at=False, types=None)
bar_plot_ax(axs[1], values2, labels2, at=False, types=None)
bar_plot_ax(axs[2], values3, lables3, at=False, types=None, vmax=1)


plt.figure(1).ax_dict = {ax.get_label(): ax for ax in plt.figure(1).axes}

plt.figure(1).set_size_inches(24.580000/2.54, 12.050000/2.54, forward=True)
plt.figure(1).axes[0].set_position([0.086072, 0.193550, 0.138920, 0.701868])
plt.figure(1).axes[0].set_ylim(0.0, 5.834953797809625e-10)
plt.figure(1).axes[0].set_yticklabels(["0", "200", "400"])
plt.figure(1).axes[0].set_yticks([0.0, 2e-10, 4e-10])
plt.figure(1).axes[0].texts[0].set_fontsize(14)
plt.figure(1).axes[0].texts[0].set_text("5.25")
plt.figure(1).axes[0].texts[1].set_fontsize(14)
plt.figure(1).axes[0].texts[1].set_text("5.30")
plt.figure(1).axes[0].get_xaxis().get_major_ticks()[0].label1.set_fontsize(20)
plt.figure(1).axes[0].get_yaxis().get_major_ticks()[0].label1.set_fontsize(15)
plt.figure(1).axes[0].get_yaxis().get_major_ticks()[1].label1.set_fontsize(15)
plt.figure(1).axes[0].get_yaxis().get_major_ticks()[2].label1.set_fontsize(15)
plt.figure(1).axes[1].set_position([0.389371, 0.193550, 0.301451, 0.770000])
plt.figure(1).axes[1].texts[0].set_fontsize(14)
plt.figure(1).axes[1].texts[0].set_rotation(0.0)
plt.figure(1).axes[1].texts[1].set_fontsize(14)
plt.figure(1).axes[1].texts[2].set_fontsize(14)
plt.figure(1).axes[1].texts[2].set_position([0.800000, 0.021978])
plt.figure(1).axes[1].texts[2].set_rotation(0.0)
plt.figure(1).axes[1].texts[3].set_fontsize(14)
plt.figure(1).axes[1].texts[3].set_position([1.193033, 0.021978])
plt.figure(1).axes[1].texts[3].set_rotation(0.0)
plt.figure(1).axes[1].texts[3].set_text("2.7e-8")
plt.figure(1).axes[1].get_yaxis().get_major_ticks()[0].label1.set_fontsize(15)
plt.figure(1).axes[1].get_yaxis().get_major_ticks()[1].label1.set_fontsize(15)
plt.figure(1).axes[1].get_yaxis().get_major_ticks()[2].label1.set_fontsize(15)
plt.figure(1).axes[1].get_yaxis().get_major_ticks()[3].label1.set_fontsize(15)
plt.figure(1).axes[1].get_yaxis().get_major_ticks()[4].label1.set_fontsize(15)
plt.figure(1).axes[1].get_yaxis().get_major_ticks()[5].label1.set_fontsize(15)
plt.figure(1).axes[1].get_yaxis().get_major_ticks()[6].label1.set_fontsize(15)
plt.figure(1).axes[2].set_position([0.830096, 0.193550, 0.152689, 0.770000])
plt.figure(1).axes[2].texts[0].set_fontsize(14)
plt.figure(1).axes[2].texts[0].set_position([-0.223257, 0.021978])
plt.figure(1).axes[2].texts[1].set_fontsize(14)
plt.figure(1).axes[2].get_yaxis().get_major_ticks()[0].label1.set_fontsize(15)
plt.figure(1).axes[2].get_yaxis().get_major_ticks()[1].label1.set_fontsize(15)
plt.figure(1).axes[2].get_yaxis().get_major_ticks()[2].label1.set_fontsize(15)
plt.figure(1).axes[2].get_yaxis().get_major_ticks()[3].label1.set_fontsize(15)
plt.figure(1).axes[2].get_yaxis().get_major_ticks()[4].label1.set_fontsize(15)
plt.figure(1).axes[2].get_yaxis().get_major_ticks()[5].label1.set_fontsize(15)
plt.figure(1).axes[2].get_yaxis().get_major_ticks()[6].label1.set_fontsize(15)

#% start: automatic generated code from pylustrator
plt.figure(1).ax_dict = {ax.get_label(): ax for ax in plt.figure(1).axes}
import matplotlib as mpl
plt.figure(1).axes[1].texts[2].set_position([0.772830, 0.021978])
plt.figure(1).axes[1].texts[3].set_text("0.016")
#% end: automatic generated code from pylustrator
plt.show()










plot_types = ["cbars_only"]
plot_types = ["correlation", "key measures", "mean_normal_stress_backward", "mean_normal_stress_forward",
              "forces_forward", "forces_backward", "mask_outline", "cbars_only", "test for border expansion"]#,"be5", "be3", "be2"]

#plot_types = ["be5"]
#plot_types = ["correlation", "cbars_only"]
# max_dict["force"] = 1
plt.ioff()
general_display(plot_types=plot_types, pixelsize=pixelsize, max_dict=max_dict, f_type=f_type,
                out_folder=out_folder, cmap="coolwarm", scalar_comaprisons=scalar_comaprisons,
                border_ex_test=border_ex_test, be_avm_list=avg_normal_stress_be, mask_exp_list=mask_exp_list,
                mean_normal_list=mean_normal_list, fields=fields, key_values=measures, plot_gt_exp=False, dm=True, at=False,
                    cb=False)
plt.ion()


# plotting a single colorbar
fig = plt.figure(figsize=(3.2, 4.75))
plt.gca().set_axis_off()
cbar = add_colorbar(vmin=0, vmax=max_dict["force"]*0.1, aspect=8, shrink=1, cbar_axes_fraction=1.2, cmap="coolwarm",
                    cbar_style="not-clickpoints")
set_axis_attribute(cbar.ax, "set_color", "black")
cbar.ax.tick_params(axis="both", which="both", color="black", length=4, width=2, labelsize=20, labelcolor="black")
fig.savefig(os.path.join(out_folder, "cbars_only" + "force"  + ".svg"))




plt.close("all")
plt.show()




